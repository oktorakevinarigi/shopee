{"version":3,"sources":["redux/ActionType.js","routes/home/redux/re-home.js","redux/Reducers.js","utils/Api.js","utils/Config.js","routes/home/redux/sa-home.js","redux/Sagas.js","redux/Store.js","routes/home/redux/ac-home.js","routes/home/views/home.js","App.js","serviceWorker.js","index.js"],"names":["HOME_GET_DATA_REQUEST","HOME_GET_DATA_SUCCESS","initState","dataSource","form","nominal","filter","sourceFilter","MataUang","Nama","Home","state","action","type","types","value","property","Header","GET","url","header","axios","get","then","res","catch","err","Config","BASE_URL","process","LATEST","getData","rootSaga","getStateHome","select","stateHome","call","resData","mapRes","Object","keys","data","rates","map","x","k","length","push","label","Number","toFixed","nama","find","y","put","all","takeLatest","getState","sagaMiddleware","createSagaMiddleware","middlewares","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","stores","createStore","combineReducers","reducers","applyMiddleware","run","handleState","Layout","Content","Option","Select","useSelector","useState","filterMataUang","setState","dispatch","useDispatch","useEffect","ActHome","handleChange","className","style","display","alignItems","defaultValue","size","formatter","replace","parser","onChange","min","width","i","key","flex","numeral","format","fontStyle","theme","twoToneColor","fontSize","onClick","removeItem","remove","justify","span","mode","placeholder","justifyContent","App","store","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d4198dd.chunk.js","sourcesContent":["//Home\nexport const HOME_HANDLE_STATE = 'HOME_HANDLE_STATE'\nexport const HOME_GET_DATA_REQUEST = 'HOME_GET_DATA_REQUEST'\nexport const HOME_GET_DATA_SUCCESS = 'HOME_GET_DATA_SUCCESS'","import * as types from '../../../redux/ActionType'\n\nconst initState = {\n    dataSource: [],\n    form: {\n        nominal: 10,\n        filter: ['IDR','CAD'],\n        sourceFilter: [\n            {\n                MataUang: 'CAD',\n                Nama: 'Canadian Dollar'\n            },\n            {\n                MataUang: 'IDR',\n                Nama: 'Indonesia Rupiah'\n            },\n            {\n                MataUang: 'GBP',\n                Nama: 'British Pound Sterling'\n            },\n            {\n                MataUang: 'CHF',\n                Nama: 'Swiss Franc'\n            },\n            {\n                MataUang: 'SGD',\n                Nama: 'Singapore Dollar'\n            },\n            {\n                MataUang: 'INR',\n                Nama: 'India Rupee'\n            },\n            {\n                MataUang: 'MYR',\n                Nama: 'Malaysian Ringgit'\n            },\n            {\n                MataUang: 'JPY',\n                Nama: 'Japanese Yen'\n            },\n            {\n                MataUang: 'KRW',\n                Nama: 'South Korean Won'\n            }\n        ]\n    }\n};\n\nexport default function (state = initState, action) {\n    switch (action.type) {\n        case types.HOME_GET_DATA_SUCCESS:\n            return {\n                ...state,\n                dataSource: action.value\n            };\n        case types.HOME_HANDLE_STATE:\n            return {\n                ...state,\n                form: {\n                    ...state.form,\n                    [action.property]: action.value\n                }\n            };\n        default:\n    }\n    return state;\n}","import Home from '../routes/home/redux/re-home';\n\nexport default {\n  Home,\n};","import axios from 'axios';\n\nexport const Header = {\n    'Content-Type': 'application/json'\n}\n\nexport function GET(url, header) {\n    return axios.get(url, header)\n        .then((res) => {\n            return res\n        })\n        .catch((err) => {\n            return err\n        })\n}\n","const Config = {\n    BASE_URL : process.env.REACT_APP_BASE_URL,\n    LATEST: \"/latest\",\n}\n\nexport default Config;\n","import { all, takeLatest, select, call, put } from 'redux-saga/effects';\nimport * as types from '../../../redux/ActionType';\nimport { GET, Header } from '../../../utils/Api'\nimport Config from '../../../utils/Config'\n\nconst getStateHome = (state) => state.Home\n\nexport function* getData() {\n    try {\n        const stateHome = yield select(getStateHome)\n        const resData = yield call(GET, Config.BASE_URL + Config.LATEST + \"?base=USD&symbols=\" + stateHome.form.filter, Header)\n        let mapRes = []\n        Object.keys(resData.data.rates).map((x) => {\n            let resultFil = stateHome.form.sourceFilter.filter(k => k.MataUang === x)\n            if (resultFil.length !== 0) {\n                mapRes.push({\n                    label: x,\n                    nominal: Number(resData.data.rates[[x]]).toFixed(2),\n                    nama: stateHome.form.sourceFilter.find(y => y.MataUang === x).Nama\n                })\n            }\n            return true\n        })\n        yield put({ type: types.HOME_GET_DATA_SUCCESS, value: mapRes })\n    } catch (err) {\n\n    }\n}\n\nexport default function* rootSaga() {\n    yield all([\n        takeLatest(types.HOME_GET_DATA_REQUEST, getData)\n    ])\n}\n","import { all } from 'redux-saga/effects';\nimport Home from '../routes/home/redux/sa-home';\nexport default function* rootSaga(getState) {\n  yield all([\n    Home()\n  ]);\n}","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducers from './Reducers';\nimport rootSaga from './Sagas';\nimport thunk from 'redux-thunk'\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [thunk, sagaMiddleware];\nconst composeEnhancers =\n  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n    : compose;\n\nconst stores = createStore(\n  combineReducers({\n    ...reducers\n  }),\n  composeEnhancers(applyMiddleware(...middlewares))\n);\nsagaMiddleware.run(rootSaga);\nexport default stores;","import * as types from '../../../redux/ActionType'\n\nexport const getData = () => {\n    return ({\n        type: types.HOME_GET_DATA_REQUEST\n    })\n}\n\nexport const handleState = (property, value) => {\n    return ({\n        type: types.HOME_HANDLE_STATE,\n        property,\n        value\n    })\n}\n","import React, { useEffect, useState } from 'react'\nimport { Layout, Card, Icon, InputNumber, Select, Button, Row, Col } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux'\nimport numeral from 'numeral'\nimport * as ActHome from '../redux/ac-home'\nconst { Header, Content } = Layout;\nconst { Option } = Select;\n\nexport default function Home() {\n    const stateHome = useSelector(state => state.Home)\n    const [state, setState] = useState({\n        filterMataUang: stateHome.form.filter\n    })\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(ActHome.getData())\n        handleChange(stateHome.form.filter)\n    }, [stateHome.form.filter])\n\n    const onChange = (property, value) => {\n        dispatch(ActHome.handleState(property, value))\n    }\n\n    const handleChange = (value) => {\n        setState({\n            ...state,\n            filterMataUang: value\n        })\n    }\n\n    const submit = () => {\n        dispatch(ActHome.handleState('filter', state.filterMataUang))\n    }\n\n    const remove = (data) => {\n        let list = stateHome.form.filter\n        let removeItem = list.filter(x => x !== data)\n        dispatch(ActHome.handleState('filter', removeItem))\n    }\n\n    const CompCard = () => {\n        return stateHome.dataSource.map((x, i) => {\n            return (\n                <Card className='contentCard' key={i}>\n                    <div className='cardBlock'>\n                        <div style={{ flex: 1 }}>\n                            <div className='cardHeader'>\n                                <div>{x.label}</div>\n                                <div>{numeral(x.nominal * stateHome.form.nominal).format('0,0.00')}</div>\n                            </div>\n                            <div className='cardLabel'>{x.label + \" - \" + x.nama}</div>\n                            <div style={{ fontStyle: 'italic' }}>1 USD = {x.label + \" \" + x.nominal}</div>\n                        </div>\n                        {stateHome.form.filter.length !== 0 ?\n                            <div className='cardRemove'>\n                                <Icon type=\"delete\" theme=\"twoTone\" twoToneColor=\"#ff4d4f\" style={{ fontSize: '20px' }} onClick={() => { remove(x.label) }} />\n                            </div>\n                            :\n                            null\n                        }\n\n                    </div>\n                </Card>\n            )\n        })\n    }\n\n    return (\n        <Layout>\n            <Header className='herader'>\n                <div className='lineHeader fontStyle'>USD - United States Dollars</div>\n                <div className='boxInput'>\n                    <div className='lineHeader'>USD</div>\n                    <div className='lineHeader' style={{display:'flex', alignItems:'center'}}>\n                        <InputNumber\n                            defaultValue={stateHome.form.nominal}\n                            size='large'\n                            formatter={value => value.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                            parser={value => value.replace(/(,*)/g, '')}\n                            onChange={(value) => onChange('nominal', value)}\n                            min={1}\n                            style={{ width: '150px' }}\n                        />\n                    </div>\n                </div>\n            </Header>\n            <Content className='content'>\n                <div className='contentBlock'>\n                    {\n                        CompCard()\n                    }\n                    <Row type='flex' justify='end'>\n                        <Col span={21}>\n                            <Select\n                                mode=\"multiple\"\n                                placeholder=\"Add more Currencies\"\n                                value={state.filterMataUang}\n                                onChange={handleChange}\n                                style={{ width: '100%' }}\n                            >\n                                {\n                                    stateHome.form.sourceFilter.map((x, i) => {\n                                        return (\n                                            <Option key={i} value={x.MataUang}>{x.MataUang}</Option>\n                                        )\n                                    })\n                                }\n                            </Select>\n                        </Col>\n                        <Col span={3} style={{display:'flex', justifyContent:'flex-end'}}>\n                            <Button type=\"primary\" onClick={submit}>Submit</Button>\n                        </Col>\n                    </Row>\n                </div>\n            </Content>\n        </Layout>\n    )\n}","import React from 'react';\nimport { Provider } from \"react-redux\";\nimport stores  from './redux/Store'\nimport Home from './routes/home/views/home'\nimport './index.css'\n\nfunction App() {\n  return (\n    <Provider store={stores}>\n      <Home />\n    </Provider>\n  )   \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}